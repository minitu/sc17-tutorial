----------------------------------
| Exercise 1. Fibonacci Sequence |
----------------------------------

  This exercise demonstrates the use of chares to recursively compute a number
in the Fibonacci Sequence. The parallelism comes from the fact that the chares
located at the leaves of the recursion tree can be executed concurrently.

1. Compiling a Charm++ Program
------------------------------
  The Charm Interface file (.ci) first needs to be parsed by charmc to generate
the C++ code needed for parallel execution. This generates .decl.h and .def.h
files, which should be included in the C++ source code. The source code is then
compiled by charmc to create the object file, and then linked to created the
binary. This process is laid out in the Makefile.

  Run the following command to compile the Fibonacci program:
    $ make

2. Sequential vs. Parallel Performance
--------------------------------------
  The program outputs the calculated Fibonacci number along with the time taken
for the computation.

  To run the program sequentially (with 1 core) with n as the Fibonacci number:
    $ make seq N=n
  or equivalently,
    $ make test P=1 N=n

  To run the program in parallel with p cores:
    $ make test P=p N=n

  Default values are P=4, N=20.
